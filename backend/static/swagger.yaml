openapi: 3.0.0
info:
  title: voluntar.md API
  description: Flask REST API
  version: 1.0.0
  license: MPL 2.0
servers:
  - url: http://185.181.229.182:5000/api
    description: Dev server
  - url: http://localhost:5000/api
    description: Local server
security:
  - basicAuth: []
paths:
  /operator:
    description: Will be renamed to /user
    get:
      summary: Returns a list of users
      parameters:
        - in: query
          name: first_name
          type: string
        - in: query
          name: last_name
          type: string
        - in: query
          name: email
          type: string
        - in: query
          name: phone
          type: string
        - in: query
          name: role
          type: string
      responses:
        '200':
          description: Users founded
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /operator/{user_id}:
    get:
      summary: Returns a user for given ID
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          description: The ID of user
      responses:
        '200':
          description: User founded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Registers a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: A user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Updates a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: A user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /operator/filters:
    get:
      summary: Returns a list of users for given filter fields. Default size list is 15 pages with 10 items per page.
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query by First Name/Last Name/Phone
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Search for active/inactive users
        - in: query
          name: roles
          schema:
            $ref: '#/components/schemas/Role'
          description: Search users for roles
      responses:
        '200':
          description: User founded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /operator/filters/{pages}/{per_pages}:
    get:
      summary: Returns a list of users for given filter fields, number of pages and number items per page.
      parameters:
        - in: path
          description: Number of pages to return
          name: pages
          schema:
            type: integer
        - in: path
          description: Number of items per page to return
          name: per_page
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
            description: Search query by First Name/Last Name/Phone
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Search for active/inactive users
        - in: query
          name: roles
          schema:
            $ref: '#/components/schemas/Role'
          description: Search users for roles
      responses:
        '200':
          description: User founded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /volunteers:
    get:
      summary: Returns a list of volunteer
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The ID of volunteer
      responses:
        '200':
          description: Volunteers founded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /volunteer/filters/{pages}/{per_page}:
    get:
      summary: Returns a list of volunteer according to filter and pagination
      parameters:
        - in: path
          name: pages
          schema:
            type: integer
          description: Number of result pages
        - in: path
          name: per_page
          schema:
            type: integer
          description: Number of result per page
        - in: query
          name: query
          schema:
            type: string
          description: Search query by First Name/Last Name/Phone
        - in: query
          name: zone
          schema:
            type: string
          description: Search filter by zone
        - in: query
          name: availability_days
          schema:
            type: string
          description: Search filter by availability_days          
        - in: query
          name: role
          schema:
            type: string
          description: Search filter by role      
        - in: query
          name: status
          schema:
            type: string
          description: Search filter by status
      responses:
        '200':
          description: Volunteers founded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /volunteers/{volunteer_id}:
    get:
      summary: Returns a volunteer for given ID
      parameters:
        - in: path
          name: volunteer_id
          schema:
            type: string
          description: The ID of volunteer
      responses:
        '200':
          description: Volunteers founded
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Volunteer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Registers a new volunteer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volunteer'
      responses:
        '201':
          description: A volunteer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volunteer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Updates a volunteer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volunteer'
      responses:
        '200':
          description: A volunteer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volunteer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /beneficiaries:
    get:
      summary: Returns a list of beneficiaries
      responses:
        '200':
          description: Beneficiary founded
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beneficiary'

  /beneficiaries/{beneficiary_id}:
    get:
      summary: Returns a beneficiary for given ID
      parameters:
        - in: path
          name: beneficiary_id
          schema:
            type: string
          description: The ID of beneficiary
      responses:
        '200':
          description: Beneficiary founded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beneficiary'
    post:
      summary: Registers a new beneficiary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beneficiary'
      responses:
        '201':
          description: A beneficiary created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beneficiary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Updates a beneficiary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beneficiary'
      responses:
        '200':
          description: A beneficiary updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beneficiary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /beneficiary/filters/{pages}/{per_page}:
    get:
      summary: Returns a list of beneficiary according to filter and pagination
      parameters:
        - in: path
          name: pages
          schema:
            type: integer
          description: Number of result pages
        - in: path
          name: per_page
          schema:
            type: integer
          description: Number of result per page
        - in: query
          name: query
          schema:
            type: string
          description: Search query by First Name/Last Name/Phone
        - in: query
          name: zone
          schema:
            type: string
          description: Search filter by zone
        - in: query
          name: is_active
          schema:
            type: boolean
          description: Search for active/inactive beneficiaries
        - in: query
          name: black_list
          schema:
            type: boolean
          description: Search for black_list beneficiaries
        - in: query
          name: phone
          schema:
            type: integer
          description: Search filter by phone
        - in: query
          name: landline
          schema:
            type: integer
          description: Search filter by landline
      responses:
        '200':
          description: Beneficiaries founded
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /requests/update:
    put:
      summary: Update just the request status and comment(used by Volunteer)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                cluster_id:
                  type: string
                comment:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: List of requests updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /requests:
    post:
      summary: Creates a request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Request'
                - $ref: '#/components/schemas/RequestPlusBeneficiary'
      responses:
        '200':
          description: Request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Updates a request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: Request updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /requests/{request_id}:
    get:
      summary: Returns a request for given ID
      parameters:
        - in: path
          name: request_id
          schema:
            type: string
          description: The ID of request
      responses:
        '200':
          description: Request founded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /requests/filters/{pages}/{per_page}:
    get:
      summary: Returns a list of requests according to filter and pagination
      parameters:
        - in: path
          name: pages
          schema:
            type: integer
          description: Number of result pages
        - in: path
          name: per_page
          schema:
            type: integer
          description: Number of result per page
        - in: query
          name: b_id
          schema:
            type: string
          description: Search by beneficiary id
        - in: query
          name: v_id
          schema:
            type: string
          description: Search by volunteer id
        - in: query
          name: u_id
          schema:
            type: string
          description: Search by user id (created_by)
        - in: query
          name: query
          schema:
            type: string
          description: Search query by beneficiary First Name/Last Name/Phone
        - in: query
          name: zone
          schema:
            type: string
          description: Search filter by beneficiary zone
        - in: query
          name: created_at
          schema:
            type: string
          description: Search filter by beneficiary created_at
        - in: query
          name: cluster_id
          schema:
            type: string
          description: Search filter by request cluster_id
        - in: query
          name: status
          schema:
            type: string
          description: Search by request status
        - in: query
          name: type
          schema:
            type: string
          description: Search by requests type
        - in: query
          name: id
          schema:
            type: string
          description: Search request id
        - in: query
          name: by_cluster
          schema:
            type: string
          description: Search one request for each cluster(in_process first)
      responses:
        '200':
          description: Requests founded
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /import/csv/requests:
     post:
       summary: Imports the requests from csv file
       consumes:
         - multipart/form-data
       parameters:
         - in: formData
           name: file
           type: file
           description: The file to upload.
  /import/csv/volunteers:
     post:
       summary: Imports the volunteers from csv file
       consumes:
         - multipart/form-data
       parameters:
         - in: formData
           name: file
           type: file
           description: The file to upload.
  /export/csv/volunteers:
     get:
       summary: Export volunteers to csv file
  /export/csv/requests:
     get:
       summary: Export requests to csv file
  /export/csv/beneficiary:
     get:
       summary: Export beneficiary to csv file


  /cluster/{cluster_id}:
    get:
      summary: Returns a list of requests for a cluster
      parameters:
        - in: path
          name: cluster_id
          schema:
            type: id
          description: id of the cluster
      responses:
        '200':
          description: Requests founded
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'


  /clusters:
    post:
      summary: Creates a new cluster and Updates the cluster properties for all requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                volunteer:
                  type: string
                request_list:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A cluster created
          content:
            application/json:
              schema:
                type: object
                properties:
                  volunteer:
                    type: string
                  _id:
                    type: string
                  created_at:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /notifications:
    post:
      summary: Registers a new notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '201':
          description: Notification object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /notifications/filters/{pages}/{per_page}:
    get:
      summary: Returns a list of notifications according to filter and pagination
      parameters:
        - in: path
          name: pages
          schema:
            type: integer
          description: Number of result pages
        - in: path
          name: per_page
          schema:
            type: integer
          description: Number of result per page
        - in: query
          name: status
          schema:
            type: string
          description: Search notification by status
        - in: query
          name: user
          schema:
            type: string
          description: Search filter by user
      responses:
        '200':
          description: Notifications found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
# Classes
    Volunteer:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        created_at:
          type: string
          format: date-time
        is_active:
          type: boolean
        address:
          type: string
        zone:
          type: string
        age:
          type: integer
        soc_media:
          type: string
        role:
          type: array
          items:
            $ref: '#/components/schemas/VolunteerRole'
        availability_hours:
          type: string
        availability_days:
          type: string
      required:
        - email
        - address
        - zone
    User:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type : string
        phone:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        is_active:
          type: boolean
        volunteers:
          type: array
          items:
            $ref: '#/components/schemas/Volunteer'
        availability_hours_start:
          type: integer
        availability_hours_end:
          type: integer
        availability_days:
          type: array
          items:
            $ref:  '#/components/schemas/WeekDay'
        last_access:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
      required:
        - email
        - password
        - address
        - zone
        - phone
    RequestPlusBeneficiary:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        landline:
          type: string
        age:
          type: integer
        zone:
          $ref: '#/components/schemas/Zone'
        address:
          type: string
        special_condition:
          $ref: '#/components/schemas/SpecialCondition'
        status:
          $ref: '#/components/schemas/RequestsStatus'
        type:
          $ref: string
        secret:
          type: string
        urgent:
          type: boolean
        comments:
          type: string
        has_symptoms:
          type: boolean
        cluster:
          type: integer
        created_at:
          type: string
          format: date-time
    Request:
      type: object
      properties:
        beneficiary:
          type: string
        status:
          $ref: '#/components/schemas/RequestsStatus'
        type:
          $ref: string
        secret:
          type: string
        urgent:
          type: boolean
        comments:
          type: string
        has_symptoms:
          type: boolean
        cluster:
          type: integer
        created_at:
          type: string
          format: date-time
    Beneficiary:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        landline:
          type: string
        age:
          type: integer
        zone:
          $ref: '#/components/schemas/Zone'
        address:
          type: string
        special_condition:
          $ref: '#/components/schemas/SpecialCondition'
        created_at:
          type: string
          format: date-time
    Cluster:
      type: object
      properties:
        volunteer:
          $ref: '#/components/schemas/Volunteer'
        created_at:
          type: string
          format: date-time
    Notification:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/NotificationType'
        subject:
          type: string
        request:
          $ref: '#/components/schemas/Request'
        created_at:
          type: string
          format: date-time
    NotificationUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/NotificationStatus'
        notification:
          $ref: '#/components/schemas/Notification'
        created_at:
          type: string
          format: date-time
# Enums
    Role:
      type: string
      enum:
        - administrator
        - coordinator
        - operator
    VolunteerRole:
      type: string
      enum:
        - delivery
        - copilot
        - packing
        - supply
        - operator
    Zone:
      type: string
      enum:
        - botanica
        - buiucani
        - centru
        - ciocana
        - riscani
        - telecentru
        - suburbii
    SpecialCondition:
      type: string
      enum:
        - disability
        - deaf_mute
        - blind_weak_seer
    RequestsStatus:
      type: string
      enum:
        - new
        - confirmed
        - in_process
        - canceled
        - solved
        - archived
    NotificationType:
      type: string
      enum:
        - new
        - canceled
    NotificationStatus:
      type: string
      enum:
        - new
        - seen
        - deleted
    WeekDay:
      type: integer
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
#Responses
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UsersResponse:
      description: Response for a list for users.
      content:
        application/json:
          schema:
            type: object
            properties:
              page:
                type: integer
              page_size:
                type: integer
              page_count:
                type: integer
              total_count:
                type: integer
              links:
                type: array
                items:
                  type: object
                  aditionalproperties:
                    type: string
              records:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    Successful:
      description: Successfull
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                type: string
